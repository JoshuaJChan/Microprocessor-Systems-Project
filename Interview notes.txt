1. How did you communicate the raw sensor data from your microcontroller to your computer? 
The raw sensor data from the VL53L1X was transferred to the microcontroller through Synchronous Inter-Integrate Circuit. The raw data includes the Range Status and the Distance. This data is then sent through the UART on the microcontroller to the PC. This is called serial communication. The data is sent one bit at a time. The type of serial communication I used to send the data from the microcontroller was using a Simplex link. The raw data was then captured on the PC using python. A program was written to capture the raw data. The serial Python library was used. A variable was assigned to the serial port COM4, and receives data at 115200 bits/s. 

2. What data processing did you perform on the raw data?
Note: Each individual line of data is stored in a variable. Not all the data is sent at once to the PC. A each individual measurement is made and sent. Between the time before the next measurement. The data is sent to the PC. The PC then assigns what was received to a variable, and decodes it. A variable was created to count the displacement. A file was created or rewritten. A variable is initialized to count the angles. I then used regex/regular expressions from the Python library, re, to detect whether the string has a 0 in the format for the range status meaning that the measurement was successful taken. If it does, the distance is saved to a variable named r. Y coordinate was calculated using the formula y = r * cos(theta)/1000 where theta is the counter variable for the angle. The same thing was done for the Z coordinate but z = r * sin(theta)/1000 since I convert the coordinates to meters. The values x y and z were written to a .xyz file where x is equal to the variable that keeps track of the displacement. The numbers were seperated with a space. after each individual measurement, the angel is incrememnted by 45 and the displacement is incremented the amount I want to move the device, so I chose 1cm. 

3. How did you visualize the processed data using 3D rendering?
I created another python program to process the data. In this file, I used the Open3D python library. The library reads in the .xyz file. The points in the file are read as a point cloud and are assiged to a variabl. The points were then connected together using the function lineSet to help with visualizing the points. The variable was used as the argument to the function draw_geometrics was used to visualize the points by drawing then on an xyz plane. The output was a 3D model of the points.
